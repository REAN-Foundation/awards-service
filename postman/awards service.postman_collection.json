{
	"info": {
		"_postman_id": "5848c7c3-39b2-41cc-835e-ecac30a028da",
		"name": "Awards service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5510218"
	},
	"item": [
		{
			"name": "Admin user",
			"item": [
				{
					"name": "Admin log-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"admin\",\r\n    \"Password\": \"{{ADMIN_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin create a moderator",
			"item": [
				{
					"name": "Get user roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var roleTypes = jsonRes.Data;\r",
									"    for(var i = 0; i < roleTypes.length; i++) {\r",
									"        var r = roleTypes[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = name.toUpperCase() + \"_ROLE_ID\";\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/role-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"role-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var clients = jsonRes.Data.Items;\r",
									"    for(var i = 0; i < clients.length; i++) {\r",
									"        var r = clients[i];\r",
									"        var name = r.Name;\r",
									"        var id = r.id;\r",
									"        var str = \"CLIENT_ID\";\r",
									"        pm.environment.set(str, id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/clients/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"clients",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create moderator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var user = jsonRes.Data;\r",
									"    pm.environment.set(\"MODERATOR_USER_ID\", user.id);\r",
									"    pm.environment.set(\"MODERATOR_USER_NAME\", user.UserName);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"PHONE\", phonenumber);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RoleId\": \"{{CONTENTMODERATOR_ROLE_ID}}\",\r\n    \"ClientId\" : \"{{CLIENT_ID}}\",\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"Sachin\",\r\n    \"LastName\": \"Tendulkar\",\r\n    \"Email\": \"sachin.tendulkar@gmail.com\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Moderator logs in",
			"item": [
				{
					"name": "moderator logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"MODERATOR_USER_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Moderator login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    //pm.environment.set(\"ADMIN_PASSWORD\", jsonRes.Data.Client.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"{{MODERATOR_USER_NAME}}\",\r\n    \"Password\": \"{{PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Moderator creates incoming event types",
			"item": [
				{
					"name": "Create medication event type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"MEDICATION_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event type is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Medication\",\r\n    \"Description\": \"This event is triggered when a patient marks medication consumption as taken or missed\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/event-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"event-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create exercise event type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"EXERCISE_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event type is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Exercise\",\r\n    \"Description\": \"This event is triggered when a patient performs some exercise\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/event-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"event-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create nutrition event type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"NUTRITION_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event type is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Nutrition\",\r\n    \"Description\": \"This event is triggered when a patient marks consumption of healthy nutrition.\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/event-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"event-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create health journey task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"HEALTH_JOURNEY_EVENT_TYPE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event type is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Name).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Health Journey\",\r\n    \"Description\": \"This event is triggered when a patient marks health journey task as done\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/event-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"event-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Search all event types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"All event types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Items');\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/engine/event-types/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"event-types",
								"search"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Get user roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User roles are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/role-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"role-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get event action types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_EVENT_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event action types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/event-action-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"event-action-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get context types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_CONTEXT_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Context types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/context-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"context-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get condition operator types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_CONDITION_OPERATOR_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Condition operator types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/condition-operator-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"condition-operator-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get logical operator types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_LOGICAL_OPERATOR_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Logical operator types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/logical-operator-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"logical-operator-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get composite operator types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_COMPOSITE_OPERATOR_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Composite operator types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/composite-operator-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"composite-operator-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get mathematical types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_MATHEMATICAL_OPERATOR_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Mathematical operator types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/mathematical-operator-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"mathematical-operator-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get operand data types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_OPERAND_DATA_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Operand data types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/operand-data-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"operand-data-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get execution statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"isUpperCase = (str) => {\r",
									"    return str.toUpperCase() === str;\r",
									"};\r",
									"\r",
									"convertPascalCaseToCapitalSnakeCase = (str) => {\r",
									"    if (str.length > 0) {\r",
									"        var outstr = \"\";\r",
									"        for (var i = 0; i < str.length; i++) {\r",
									"            var c = str.charAt(i);\r",
									"            if (isUpperCase(c) && i !== 0) {\r",
									"                outstr += '_' + c.toUpperCase();\r",
									"            }\r",
									"            else {\r",
									"                outstr += c.toUpperCase();\r",
									"            }\r",
									"        }\r",
									"        return outstr;\r",
									"    }\r",
									"    return str;\r",
									"};\r",
									"\r",
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var types = jsonRes.Data.Types;\r",
									"    for(var i = 0; i < types.length; i++) {\r",
									"        var r = types[i];\r",
									"        const x = convertPascalCaseToCapitalSnakeCase(r);\r",
									"        var str = x + \"_EXECUTION_STATUS_TYPE\";\r",
									"        console.log(str);\r",
									"        pm.environment.set(str, types[i]);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Execution status types are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Types');\r",
									"    pm.expect(jsonRes.Data.Types.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/types/execution-status-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"execution-status-types"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Moderator creates schema",
			"item": [
				{
					"name": "Create schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNodeId);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Medication 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes medication regularly for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"ReuseExistingInstance\",\r\n    \"EventTypeIds\": [\r\n        \"{{MEDICATION_EVENT_TYPE_ID}}\"\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/schema",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"schema"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get schema by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SCHEMA_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"SCHEMA_ROOT_NODE_ID\", jsonRes.Data.RootNodeId);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"Name\": \"Medication 7-Day Badge\",\r\n    \"Description\": \"This schema represents a badge award logic when a patient takes medication regularly for 7 consecutive days. The patient can keep accumulating these badges.\",\r\n    \"Type\": \"CreateNewInstanceAlways\",\r\n    \"EventTypeIds\": [\r\n        \"{{MEDICATION_EVENT_TYPE_ID}}\"\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/schema/{{SCHEMA_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"schema",
								"{{SCHEMA_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get root Node for schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"CONTEXT_ID\", jsonRes.Data.Context.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"PArticipant is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Context');\r",
									"    pm.expect(jsonRes.Data.Context).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/nodes/{{SCHEMA_ROOT_NODE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"nodes",
								"{{SCHEMA_ROOT_NODE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create child node to root node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"NODE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Node is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Get Existing badges\",\r\n    \"Description\": \"Extract existing 7-day medication badges for the participant.\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\" : \"Extract-Data\",\r\n        \"Name\": \"Extract-Badges\",\r\n        \"ActionSubject\": {\r\n            \"BadgeCategory\": \"Medication\",\r\n            \"BadgeTitle\": \"7-Day Medication Adherence\",\r\n            \"ContextId\": null\r\n        },\r\n        \"Params\": {\r\n            \"Action\": \"Extract-Data\",\r\n            \"Message\": \"Extracting 7-day medication adherence badges\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/nodes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"nodes"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Update root node to add next next node in default action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"CONTEXT_ID\", jsonRes.Data.Context.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"PArticipant is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Context');\r",
									"    pm.expect(jsonRes.Data.Context).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Type\": \"Execution-Node\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\" : \"Process-Data\",\r\n        \"Name\": \"Calculate Continuity\",\r\n        \"ActionSubject\": {\r\n            \"RecordType\": \"Medication\",\r\n            \"ValueName\": \"Taken\",\r\n            \"OperandDataType\": \"Boolean\",\r\n            \"OperandValue\": true,\r\n            \"Operator\": \"Equal\",\r\n            \"ContinuityCount\": 7\r\n        },\r\n        \"Params\": {\r\n            \"Action\": \"Process-Data\",\r\n            \"Message\": \"Processing records for 7-day medication adherence continuity\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/nodes/{{SCHEMA_ROOT_NODE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"nodes",
								"{{SCHEMA_ROOT_NODE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/rules",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"rules"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Delete rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/rules/{{RULE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"rules",
								"{{RULE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create child condition - find consecutive days",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RuleId\": \"{{RULE_ID}}\",\r\n    \"Name\": \"Atleast one instance 7 consecutive days of medication adherence found\",\r\n    \"Description\": \"From the list of medication consumption records, atleast 1 consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/conditions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"conditions"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Create child condition - check if badge already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RULE_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"ROOT_CONDITION_ID\", jsonRes.Data.Condition.id);\r",
									"    pm.environment.set(\"RULE_ACTION_ID\", jsonRes.Data.Action.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/conditions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"conditions"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Create participant",
			"item": [
				{
					"name": "Create participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"CONTEXT_ID\", jsonRes.Data.Context.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Participant is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = (new Date()).toISOString().split('T')[0];\r",
									"pm.environment.set(\"TODAY\", today);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{MODERATOR_USER_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientId\": \"{{CLIENT_ID}}\",\r\n    \"ReferenceId\": \"{{REFERENCE_ID}}\",\r\n    \"Prefix\": \"Mr.\",\r\n    \"FirstName\": \"Sachin\",\r\n    \"LastName\": \"Tendulkar\",\r\n    \"Gender\": \"Male\",\r\n    \"BirthDate\": \"1974-04-24\",\r\n    \"Email\": \"sachin.tendulkar@gmail.com\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"1234567890\",\r\n    \"OnboardingDate\": \"{{TODAY}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participants",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get participant by reference id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PARTICIPANT_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"CONTEXT_ID\", jsonRes.Data.Context.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"PArticipant is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Context');\r",
									"    pm.expect(jsonRes.Data.Context).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/by-reference-id/{{REFERENCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"by-reference-id",
								"{{REFERENCE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get participants by client id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/participants/by-client-id/{{CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"participants",
								"by-client-id",
								"{{CLIENT_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Get context for participant / reference id",
			"item": [
				{
					"name": "Create schema instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SCHEMA_INSTANCE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"ContextId\": \"{{CONTEXT_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/schema-instances",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"schema-instances"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				},
				{
					"name": "Get schema instance by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SCHEMA_INSTANCE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Schema instance is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Client');\r",
									"    pm.expect(jsonRes.Data.Client).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidFrom');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootNodeId');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SchemaId\": \"{{SCHEMA_ID}}\",\r\n    \"Name\": \"Medication 7 Day Badge Rule\",\r\n    \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n    \"ParentNodeId\": \"{{SCHEMA_ROOT_NODE_ID}}\",\r\n    \"Action\": {\r\n        \"ActionType\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n        \"Name\": \"Medication 7-Days Badge\",\r\n        \"Description\": \"This rule represents logical steps involved in awarding a badge for consecutive 7 days.\",\r\n        \"Params\": {\r\n            \"Message\": \"Award medication 7-days badge.\",\r\n            \"Action\": \"{{AWARD_BADGE_EVENT_TYPE}}\",\r\n            \"NextNodeId\": null,\r\n            \"Extra\": {}\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/engine/schema-instances/{{SCHEMA_INSTANCE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"engine",
								"schema-instances",
								"{{SCHEMA_INSTANCE_ID}}"
							]
						},
						"description": "User login with username/phone/email and password.\n\n'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role."
					},
					"response": []
				}
			]
		}
	]
}